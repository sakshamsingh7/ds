ques 1
Given a signed 32-bit integer x, return x with its digits reversed.
If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
ANSWER

class Solution {
    public int reverse(int x) {
        int d=0;long sum=0;int p=0;
        if(x<0){
            p=1;
            x=x*(-1);
        }
        for(int i=1;i<=x;i++){
            if(x%10==0){
                x=x/10;
            }
            else{
                break;
            }
        }
        
        while (x!=0){
           
             d=x%10;
            sum=sum*10+d;
            x=x/10;
        }
       if(sum< -2147483648||sum>2147483647){ //long sum=0 is used due to the range 
           return 0;}
        else{
           
            if(p==1){
            return (int)sum*(-1);
        }
        else {
            return (int)sum;
        }
    }
       
    }
}
(ques 2)

//Write a function that reverses a string. The input string is given as an array of characters s.

// You must do this by modifying the input array in-place with O(1) extra memory.



 

// Example 1:

// Input: s = ["h","e","l","l","o"]
// Output: ["o","l","l","e","h"]
class Solution {
    public void reverseString(char[] s) {
        // char c[]=s.tocharArray(); to convert string to array;
        //String str = String.valueOf(c); to convert array to string;
       // using two pointer approach
       int j=s.length-1;
       for(int i=0;i<s.length;i++){
           if(i<j){
          char temp=s[i];
           s[i]=s[j];
           s[j]=temp;
       j--;
       } }
        System.out.println(s);
    }
}


(ques 3)
// Divide Array Into Equal Pairs
// Easy


// Share
// You are given an integer array nums consisting of 2 * n integers.

// You need to divide nums into n pairs such that:

// Each element belongs to exactly one pair.
// The elements present in a pair are equal.
// Return true if nums can be divided into n pairs, otherwise return false.

 

// Example 1:

// Input: nums = [3,2,3,2,2,2]
// Output: true



//hashset use (it does not take duplicate values ,can check if it is empty or not)
//we have both string and integer implemntation here



// import java.io.*;
// import java.util.HashSet;

// public class HashSetDemo {
// 	public static void main(String args[])
// 	{
// 		// Creating an empty HashSet
// 		HashSet<String> set = new HashSet<String>();

// 		// Use add() method to add elements into the Set
// 		set.add("Welcome");
// 		set.add("To");
// 		set.add("Geeks");
// 		set.add("4");
// 		set.add("Geeks");

// 		// Displaying the HashSet
// 		System.out.println("HashSet: " + set);

// 		// Check for the empty set
// 		System.out.println("Is the set empty: " + set.isEmpty());

// 		// Clearing the set using clear() method
// 		set.clear();

// 		// Again Checking for the empty set
// 		System.out.println("Is the set empty: " + set.isEmpty());
// 	}
// }


//integer implementation
class Solution {
    public boolean divideArray(int[] nums) {
       Set<Integer> nt= new HashSet<Integer>();
        for(int i=0;i<nums.length;i++){
           if(nt.contains(nums[i])){
               nt.remove(nums[i]);
           }
            else{
                nt.add(nums[i]);
            }
        }
        return nt.isEmpty();
    }} 
   
   (ques4)
  // You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.

// Each plant needs a specific amount of water. You will water the plants in the following way:

// Water the plants in order from left to right.
// After watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.
// You cannot refill the watering can early.
// You are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.

// Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.

 

// Example 1:

// Input: plants = [2,2,3,3], capacity = 5
// Output: 14
// Explanation: Start at the river with a full watering can:
// - Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.
// - Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.
// - Since you cannot completely water plant 2, walk back to the river to refill (2 steps).
// - Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.
// - Since you cannot completely water plant 3, walk back to the river to refill (3 steps).
// - Walk to plant 3 (4 steps) and water it.
// Steps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.

class Solution {
    public int wateringPlants(int[] plants, int capacity) {
        int c=0;int p=capacity;
        for(int i=0;i<plants.length;i++){
            if(plants[i]<=p){
                c++;
                p-=plants[i];
            }
            else{
                c+=i;
                p=capacity;
                c+=i+1;
                p-=plants[i];
            }
        }
        return c;
    }
}

(ques5)

// Given an integer n, return any array containing n unique integers such that they add up to 0.

 

// Example 1:

// Input: n = 5
// Output: [-7,-1,1,3,4]


class Solution {
    
    public int[] sumZero(int n) {//doing it with arraylist would have been more easier if it had been given to do in it in the parameter 
        int arr[]=new int[n];
        if(n%2!=0){
          arr[0]=0;
        for(int i=1;i<=n/2;i++){
            arr[i]=i;
            arr[n-i]=-i;
        }}
        
    if(n%2==0){
          int p=1;
        for(int i=0;i<n/2;i++){
            arr[i]=p;
            arr[n-i-1]=-p;
           p++;
        }}
    return arr;}}
        
        
        
        
//        ArrayList<Integer> arr=new ArrayList<Integer>();
//         if(n%2!=0){
//             arr.add(0);
//         for(int i=1;i<=n/2;i++){
//             arr.add(i);
//             arr.add(-i);
//         }}
//         if(n%2==0){
           
//         for(int i=1;i<=n/2;i++){
//             arr.add(i);
//             arr.add(-i);
//         }}
//         return arr;
//     }
// }
   
   (ques 6)
   Given a positive integer N., The task is to find the value of 
   \sum_{i=1}^{i=n} F(i)  where function F(i) for the number i be defined as the sum of all divisors of ‘i‘.

Example 1:

Input:
N = 4
Output:
15
Explanation:
F(1) = 1
F(2) = 1 + 2 = 3
F(3) = 1 + 3 = 4
F(4) = 1 + 2 + 4 = 7
ans = F(1) + F(2) + F(3) + F(4)
    = 1 + 3 + 4 + 7
    = 15
    
    
    class Solution{
    static long sumOfDivisors(int N){
        // code here
        long sumTotal=0;
        for(int i=1;i<=N;i++)
        {
            sumTotal+=(N/i)*i;
            //How many time 1 came, 2 came , 3 came : i.e. N/i
            //Multiply the number of occurence with the Number and get the sum
        }
        return sumTotal;
    }
    
}
(ques7)
//Given an array of N integers arr[] where each element represents the 
// max length of the jump that can be made forward from that element. 
// Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

// Note: Return -1 if you can't reach the end of the array.


// Example 1:

// Input:
// N = 11 
// arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 
// Output: 3 
// Explanation: 
// First jump from 1st element to 2nd 
// element with value 3. Now, from here 
// we jump to 5th element with value 9, 
// and from here we will jump to the last. 
class Solution{
    static int minJumps(int[] arr){
        // your code here
        int c=0;int n=arr.length;
        for(int i=1;i<=arr.length;i++){
            if(i<=n){
            i=i+arr[i];
            c++;}
    }
    return c;
}}

(ques8)

Sum of first n terms 
// Given and integer N.Calculate the sum of series 1^3 + 2^3 + 3^3 + 4^3 + … till N-th term.
// User function Template for Java
//here the intuition is correct but we get tle due to consttraints so use math

// class Solution {
//     long sumOfSeries(long N) {
//         // code here
//         long sum=0;
//         if(N==0){
//             return 0;
//         }
//         if(N>50000){
//             return 0;
//         }
//         if(N==1){
//             return 1;
//         }
//         sum=(long)Math.pow(N,3)+(sumOfSeries(N-1));
//         return sum;
//     }
// }


//second 
class Solution {
     long sumOfSeries(long N) {
         //we know sum of n natura numbers is
         long a=0;
         a=(N*(N+1))/2;
         return a*a; //yaha sum ko multiply kar diye to answer mil gya
         
     }}
     
     (ques 9)
     
     // You are given an integer n, the number of teams in a tournament that has strange rules:

// If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.
// If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.

class Solution {
   
    public int numberOfMatches(int n) {
        int match=0;
        while(n!=1){
            
       if(n%2==0){
           match+=n/2;
           n=n-(n/2);
       }
        else{

        match+=(n)/2;
            n=n-(n/2);
            }
        }
        return match;}}
        
        
(ques 10):

// Given an array A[] of N positive integers which can contain integers from 1 to P where elements can be repeated or 
//can be absent from the array. Your task is to count the frequency of all elements from 1 to N.
// Note: The elements greater than N in the array can be ignored for counting and do 
//modify the array in-place.
// N = 5
// arr[] = {2, 3, 2, 3, 5}
// P = 5
// Output:
// 0 2 2 0 1

class Solution{
    //Function to count the frequency of all elements from 1 to N in the array.
    public static void frequencyCount(int arr[], int N, int P)
    {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < N; i++){
            if(map.containsKey(arr[i])){
                map.put(arr[i], map.get(arr[i]) + 1);// map.get gives the value of that key in the map
            }
            else{
                map.put(arr[i], 1);
            }
            
        }
        
        int j = 1;
        for(int i = 0; i < N; i++){
            if(map.containsKey(j)){
                arr[i] = map.get(j);
            }
            else{
                arr[i] = 0;
            }
            j++;
        }
            
    }
}

(Ques11)
// Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.

// There may be duplicates in the original array.

// Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

 

// Example 1:

// Input: nums = [3,4,5,1,2]
// Output: true
// Explanation: [1,2,3,4,5] is the original sorted array.


class Solution {
    public boolean check(int[] nums) {
        // here we compare all the neighbouring elemnts and check whether they are in somewhat sorted
        // there will be a small change due to rotation in the array at only one place.
        // so if there are irregularities more than once, return false
        // else return true;
        //here we just have to check for rotated array concept checking the last element with the first if they are sorted and then rotated it will return true else return false
        //as to rotate an array we use formula
        //a[i]=a[(i+k%n)] to check(a,b) and also helps in checking cyclic manner as
      //  1%5=1,2%5=2 ansd so on
        //when ever we rotate an  sorted array we get a point where b!>a and the left and right part is sorted  we have to just check that that point count must 1 only if it has more then retrn false
        //also check for last element must be <first element 
        
        int c=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>nums[(i+1)%nums.length]){

            c++;
            }
        }
        if(c>1){
return false;
        }
        else return true;
    }
}
